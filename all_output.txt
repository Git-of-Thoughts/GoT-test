The core classes, functions, and methods that will be necessary are:

1. `Snake`: This class will represent the snake in the game. It will have methods to move the snake, grow the snake, and check if the snake has collided with itself.

2. `Food`: This class will represent the food in the game. It will have a method to place the food at a random location on the grid.

3. `Game`: This class will represent the game itself. It will have methods to start the game, update the game state, and check if the game is over.

4. `SpotifyPlayer`: This class will handle playing songs from Spotify. It will have methods to authenticate with Spotify, get a random song from a playlist, and play a song.

5. `main`: This function will be the entry point of the program. It will create instances of the above classes and control the flow of the game.

Now, let's write the code for each of these components.

`requirements.txt`
```plaintext
pygame
spotipy
```

`snake.py`
```python
class Snake:
    def __init__(self):
        self.length = 1
        self.positions = [((SCREEN_WIDTH // 2), (SCREEN_HEIGHT // 2))]
        self.direction = random.choice([UP, DOWN, LEFT, RIGHT])
        self.color = (0, 255, 0)

    def get_head_position(self):
        return self.positions[0]

    def turn(self, point):
        if self.length > 1 and (point[0]*-1, point[1]*-1) == self.direction:
            return
        else:
            self.direction = point

    def move(self):
        cur = self.get_head_position()
        x, y = self.direction
        new = (((cur[0]+(x*GRIDSIZE))%SCREEN_WIDTH), (cur[1]+(y*GRIDSIZE))%SCREEN_HEIGHT)
        if len(self.positions) > 2 and new in self.positions[2:]:
            self.reset()
        else:
            self.positions.insert(0, new)
            if len(self.positions) > self.length:
                self.positions.pop()

    def reset(self):
        self.length = 1
        self.positions = [((SCREEN_WIDTH // 2), (SCREEN_HEIGHT // 2))]
        self.direction = random.choice([UP, DOWN, LEFT, RIGHT])

    def draw(self, surface):
        for p in self.positions:
            pygame.draw.rect(surface, self.color, (p[0], p[1], GRIDSIZE, GRIDSIZE))
```

`food.py`
```python
class Food:
    def __init__(self):
        self.position = (0, 0)
        self.color = (255, 0, 0)
        self.randomize_position()

    def randomize_position(self):
        self.position = (random.randint(0, GRID_WIDTH-1)*GRIDSIZE, random.randint(0, GRID_HEIGHT-1)*GRIDSIZE)

    def draw(self, surface):
        pygame.draw.rect(surface, self.color, (self.position[0], self.position[1], GRIDSIZE, GRIDSIZE))
```

`game.py`
```python
class Game:
    def __init__(self):
        pygame.init()
        self.snake = Snake()
        self.food = Food()

    def check_for_collision(self):
        if self.snake.get_head_position() == self.food.position:
            self.snake.length += 1
            self.food.randomize_position()

    def update(self):
        self.snake.move()
        self.check_for_collision()

    def draw(self, surface):
        self.snake.draw(surface)
        self.food.draw(surface)

    def is_over(self):
        if self.snake.get_head_position() in self.snake.positions[1:]:
            return True
        return False
```

`spotify_player.py`
```python
import spotipy
from spotipy.oauth2 import SpotifyOAuth

class SpotifyPlayer:
    def __init__(self, client_id, client_secret, redirect_uri, scope):
        self.sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_id=client_id,
                                                            client_secret=client_secret,
                                                            redirect_uri=redirect_uri,
                                                            scope=scope))

    def get_random_song(self, playlist_id):
        results = self.sp.playlist(playlist_id)
        songs = results['tracks']['items']
        song = random.choice(songs)
        return song['track']['uri']

    def play_song(self, song_uri):
        self.sp.start_playback(uris=[song_uri])
```

`main.py`
```python
from game import Game
from spotify_player import SpotifyPlayer

def main():
    game = Game()
    player = SpotifyPlayer(CLIENT_ID, CLIENT_SECRET, REDIRECT_URI, SCOPE)

    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == KEYDOWN:
                if event.key == K_UP:
                    game.snake.turn(UP)
                elif event.key == K_DOWN:
                    game.snake.turn(DOWN)
                elif event.key == K_LEFT:
                    game.snake.turn(LEFT)
                elif event.key == K_RIGHT:
                    game.snake.turn(RIGHT)

        game.update()
        if game.is_over():
            break

        song_uri = player.get_random_song(PLAYLIST_ID)
        player.play_song(song_uri)

        pygame.display.update()
        fpsClock.tick(FPS)

if __name__ == "__main__":
    main()
```

Please replace `CLIENT_ID`, `CLIENT_SECRET`, `REDIRECT_URI`, `SCOPE`, and `PLAYLIST_ID` with your actual Spotify app's client ID, client secret, redirect URI, scope, and the ID of the playlist you want to play songs from, respectively.