The core classes, functions, and methods necessary for a Variational Autoencoder (VAE) in PyTorch are:

1. `VAE`: This is the main class for the VAE. It will contain the structure of the VAE, including the encoder and decoder networks.

2. `Encoder`: This class will define the encoder part of the VAE. It will take in the input data and output a mean and log variance, which will be used to sample a latent vector.

3. `Decoder`: This class will define the decoder part of the VAE. It will take in a latent vector and output a reconstruction of the input data.

4. `reparameterize`: This function will perform the reparameterization trick, which allows us to backpropagate gradients through the random sampling operation.

5. `forward`: This method will define the forward pass of the VAE. It will pass the input data through the encoder, perform reparameterization to sample a latent vector, and then pass this through the decoder.

6. `loss_function`: This function will define the loss function for the VAE, which is a combination of a reconstruction loss (e.g., binary cross entropy) and a KL divergence loss.

7. `train`: This function will perform one epoch of training on the VAE.

8. `test`: This function will evaluate the VAE on a test dataset.

Now, let's write the code for each of these components. We'll start with the main file, `vae.py`, which will contain the `VAE` class and the `Encoder` and `Decoder` classes. Then we'll write `train.py`, which will contain the `train` and `test` functions, as well as the main training loop.

vae.py
```python
import torch
from torch import nn
from torch.nn import functional as F

class Encoder(nn.Module):
    def __init__(self, input_dim, hidden_dim, z_dim):
        super(Encoder, self).__init__()
        self.fc1 = nn.Linear(input_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, z_dim)
        self.fc3 = nn.Linear(hidden_dim, z_dim)

    def forward(self, x):
        h = F.relu(self.fc1(x))
        return self.fc2(h), self.fc3(h)

class Decoder(nn.Module):
    def __init__(self, z_dim, hidden_dim, output_dim):
        super(Decoder, self).__init__()
        self.fc1 = nn.Linear(z_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, output_dim)

    def forward(self, x):
        h = F.relu(self.fc1(x))
        return torch.sigmoid(self.fc2(h))

class VAE(nn.Module):
    def __init__(self, input_dim, hidden_dim, z_dim):
        super(VAE, self).__init__()
        self.encoder = Encoder(input_dim, hidden_dim, z_dim)
        self.decoder = Decoder(z_dim, hidden_dim, input_dim)

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5*logvar)
        eps = torch.randn_like(std)
        return mu + eps*std

    def forward(self, x):
        mu, logvar = self.encoder(x.view(-1, 784))
        z = self.reparameterize(mu, logvar)
        return self.decoder(z), mu, logvar
```

train.py
```python
import torch
from torch import nn, optim
from torchvision import datasets, transforms
from vae import VAE

def loss_function(recon_x, x, mu, logvar):
    BCE = F.binary_cross_entropy(recon_x, x.view(-1, 784), reduction='sum')
    KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())
    return BCE + KLD

def train(epoch, model, train_loader, optimizer):
    model.train()
    train_loss = 0
    for batch_idx, (data, _) in enumerate(train_loader):
        optimizer.zero_grad()
        recon_batch, mu, logvar = model(data)
        loss = loss_function(recon_batch, data, mu, logvar)
        loss.backward()
        train_loss += loss.item()
        optimizer.step()
    print('====> Epoch: {} Average loss: {:.4f}'.format(epoch, train_loss / len(train_loader.dataset)))

def test(epoch, model, test_loader):
    model.eval()
    test_loss = 0
    with torch.no_grad():
        for i, (data, _) in enumerate(test_loader):
            recon_batch, mu, logvar = model(data)
            test_loss += loss_function(recon_batch, data, mu, logvar).item()
    test_loss /= len(test_loader.dataset)
    print('====> Test set loss: {:.4f}'.format(test_loss))

def main():
    epochs = 10
    batch_size = 128
    learning_rate = 1e-3

    train_dataset = datasets.MNIST('../data', train=True, download=True, transform=transforms.ToTensor())
    test_dataset = datasets.MNIST('../data', train=False, transform=transforms.ToTensor())
    train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=True)

    model = VAE(784, 400, 20)
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)

    for epoch in range(1, epochs + 1):
        train(epoch, model, train_loader, optimizer)
        test(epoch, model, test_loader)

if __name__ == "__main__":
    main()
```

requirements.txt
```txt
torch==1.8.1
torchvision==0.9.1
```

This code should be fully functional, assuming you have the necessary dependencies installed (as listed in `requirements.txt`). It trains a VAE on the MNIST dataset for 10 epochs, printing the training and test loss at each epoch.