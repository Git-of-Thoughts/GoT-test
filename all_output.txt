Assumptions:
1. The programming language to be used is Python.
2. The text-to-speech conversion will be done using Google Text-to-Speech (gTTS) library.
3. The training dataset will be in the form of text files.
4. The program will be a command-line application.
5. The program will be used by developers or users comfortable with command-line interfaces.
6. The timeline for the completion of the program is not specified, so we will aim for a basic functional version first.

Core Classes, Functions, Methods:
1. `TextToSpeech`: This class will handle the conversion of text to speech.
    - `__init__`: Initializes the class with necessary parameters.
    - `convert_text_to_speech`: Converts the given text to speech.
2. `TrainModel`: This class will handle the training of the model.
    - `__init__`: Initializes the class with necessary parameters.
    - `train`: Trains the model using the given dataset.
3. `main`: This function will serve as the entry point of the program.

Now, let's write the code for each file.

main.py
```python
from text_to_speech import TextToSpeech
from train_model import TrainModel

def main():
    # Initialize the classes
    tts = TextToSpeech()
    tm = TrainModel()

    # Train the model
    tm.train()

    # Convert text to speech
    tts.convert_text_to_speech()

if __name__ == "__main__":
    main()
```

text_to_speech.py
```python
from gtts import gTTS

class TextToSpeech:
    def __init__(self):
        pass

    def convert_text_to_speech(self, text):
        # Convert the text to speech
        speech = gTTS(text=text, lang='en', slow=False)

        # Save the speech audio into a file
        speech.save("output.mp3")
```

train_model.py
```python
class TrainModel:
    def __init__(self):
        pass

    def train(self):
        # Placeholder for training the model
        pass
```

requirements.txt
```
gtts==2.2.3
```

Please note that the `TrainModel` class is a placeholder as the training of a text-to-speech model is a complex task that requires a large amount of data and computational resources. It's beyond the scope of this task. The `gtts` library used here is a simple text-to-speech conversion library and does not support training on custom datasets.