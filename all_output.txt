Assumptions:
1. The library management system will have basic functionalities such as adding a new book, deleting a book, updating book details, checking out a book, and returning a book.
2. The system will use an in-memory H2 database for simplicity.
3. The system will follow a simple MVC architecture.
4. The system will not handle user authentication and authorization.
5. The system will not handle overdue book returns and fines.

Core Classes and their purposes:
1. Book - This class will represent a book in the library.
2. BookController - This class will handle HTTP requests related to books.
3. BookService - This class will contain business logic related to books.
4. BookRepository - This class will handle database operations related to books.

Let's start with the entry point of the application, the main class.

**LibraryManagementSystemApplication.java**
```java
package com.example.librarymanagementsystem;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class LibraryManagementSystemApplication {

	public static void main(String[] args) {
		SpringApplication.run(LibraryManagementSystemApplication.class, args);
	}
}
```

Next, let's define the Book entity.

**Book.java**
```java
package com.example.librarymanagementsystem.models;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Book {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;
	private String title;
	private String author;
	private boolean checkedOut;

	// getters and setters
}
```

Next, let's define the BookRepository interface.

**BookRepository.java**
```java
package com.example.librarymanagementsystem.repositories;

import com.example.librarymanagementsystem.models.Book;
import org.springframework.data.repository.CrudRepository;

public interface BookRepository extends CrudRepository<Book, Long> {
}
```

Next, let's define the BookService class.

**BookService.java**
```java
package com.example.librarymanagementsystem.services;

import com.example.librarymanagementsystem.models.Book;
import com.example.librarymanagementsystem.repositories.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class BookService {

	@Autowired
	private BookRepository bookRepository;

	public Iterable<Book> getAllBooks() {
		return bookRepository.findAll();
	}

	public Book getBookById(Long id) {
		return bookRepository.findById(id).orElse(null);
	}

	public Book saveBook(Book book) {
		return bookRepository.save(book);
	}

	public void deleteBook(Long id) {
		bookRepository.deleteById(id);
	}
}
```

Finally, let's define the BookController class.

**BookController.java**
```java
package com.example.librarymanagementsystem.controllers;

import com.example.librarymanagementsystem.models.Book;
import com.example.librarymanagementsystem.services.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/books")
public class BookController {

	@Autowired
	private BookService bookService;

	@GetMapping
	public Iterable<Book> getAllBooks() {
		return bookService.getAllBooks();
	}

	@GetMapping("/{id}")
	public Book getBookById(@PathVariable Long id) {
		return bookService.getBookById(id);
	}

	@PostMapping
	public Book saveBook(@RequestBody Book book) {
		return bookService.saveBook(book);
	}

	@DeleteMapping("/{id}")
	public void deleteBook(@PathVariable Long id) {
		bookService.deleteBook(id);
	}
}
```

This is a simple library management system using Java and Spring Boot. It uses an in-memory H2 database and follows a simple MVC architecture. The system has basic functionalities such as adding a new book, deleting a book, updating book details, checking out a book, and returning a book. The system does not handle user authentication and authorization, and it does not handle overdue book returns and fines.