The core classes, functions, and methods necessary for this project include:

1. User class: This class will handle user-related functionalities such as registration and login.
2. Game class: This class will handle game-related functionalities such as starting a new game, joining an existing game, making a move, and checking the game status.
3. Firebase class: This class will handle all interactions with Firebase, including user authentication and data storage and retrieval.

Now, let's start with the entry point file, `app.py`.

app.py
```python
from flask import Flask, render_template, request, redirect, url_for
from firebase_admin import initialize_app, auth, firestore
from user import User
from game import Game

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        User.register(request.form)
        return redirect(url_for('home'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        User.login(request.form)
        return redirect(url_for('home'))
    return render_template('login.html')

@app.route('/game', methods=['GET', 'POST'])
def game():
    if request.method == 'POST':
        Game.start(request.form)
        return redirect(url_for('game'))
    return render_template('game.html')

if __name__ == '__main__':
    app.run(debug=True)
```

Next, let's move on to the `User` class in `user.py`.

user.py
```python
from firebase_admin import auth

class User:
    @staticmethod
    def register(form):
        user = auth.create_user(
            email=form['email'],
            password=form['password']
        )
        return user.uid

    @staticmethod
    def login(form):
        user = auth.get_user_by_email(form['email'])
        if user and user.check_password(form['password']):
            return user.uid
        return None
```

Next, the `Game` class in `game.py`.

game.py
```python
from firebase_admin import firestore

class Game:
    @staticmethod
    def start(form):
        db = firestore.client()
        game = db.collection('games').document()
        game.set({
            'player1': form['player1'],
            'player2': form['player2'],
            'status': 'in_progress',
            'moves': []
        })
        return game.id

    @staticmethod
    def join(game_id, player_id):
        db = firestore.client()
        game = db.collection('games').document(game_id)
        game.update({
            'player2': player_id
        })
        return game.id

    @staticmethod
    def make_move(game_id, move):
        db = firestore.client()
        game = db.collection('games').document(game_id)
        game.update({
            'moves': firestore.ArrayUnion([move])
        })
        return game.id

    @staticmethod
    def check_status(game_id):
        db = firestore.client()
        game = db.collection('games').document(game_id)
        return game.get().to_dict()['status']
```

Finally, the `requirements.txt` file.

requirements.txt
```
Flask==1.1.2
firebase-admin==4.5.0
```

Please note that this is a simplified version of the website and does not include error handling, user sessions, game logic, or a user interface. You would need to add these features to create a fully functional chess website.