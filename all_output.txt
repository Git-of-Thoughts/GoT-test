Given the task, we will need to create a single R script file that will handle the data loading, data processing, statistical testing, and plotting. The script will be organized into functions for modularity and clarity.

Here are the core functions we will need:

1. `load_data`: This function will load the CSV data into a data frame.
2. `calculate_p_values`: This function will perform a t-test on each category in the data and return the p-values.
3. `create_bar_plot`: This function will create the bar plot and add the p-values as text above the bars.

Now, let's write the code for the R script.

bar_plot_with_p_values.R
```R
# Load necessary libraries
library(ggplot2)
library(readr)

# Function to load data
load_data <- function(file_path) {
  data <- read_csv(file_path)
  return(data)
}

# Function to calculate p-values
calculate_p_values <- function(data) {
  categories <- unique(data$category)
  p_values <- sapply(categories, function(cat) {
    t.test(data$value[data$category == cat])$p.value
  })
  return(p_values)
}

# Function to create bar plot with p-values
create_bar_plot <- function(data, p_values) {
  plot <- ggplot(data, aes(x = category, y = value)) +
    geom_bar(stat = "identity") +
    geom_text(aes(label = round(p_values, 3)), vjust = -0.5)
  return(plot)
}

# Main script
file_path <- "data.csv"  # Replace with your CSV file path
data <- load_data(file_path)
p_values <- calculate_p_values(data)
plot <- create_bar_plot(data, p_values)
print(plot)
```

This script assumes that your data is in a CSV file with two columns: `category` and `value`. The `category` column should be a factor (categorical variable), and the `value` column should be numeric. The script performs a t-test on the values for each category and displays the p-values above the bars in the bar plot. The p-values are rounded to three decimal places for readability.

Please replace `"data.csv"` with the path to your actual CSV file before running the script.