The core classes, functions, and methods that will be necessary for the snake game are:

1. `Game`: This class will handle the game logic, including the game loop, user input, and game over conditions.
   - `__init__`: Initializes the game.
   - `run`: Starts the game loop.
   - `handle_input`: Processes user input.
   - `update`: Updates the game state.
   - `draw`: Draws the game state to the console.
   - `game_over`: Checks if the game is over.

2. `Snake`: This class will represent the snake.
   - `__init__`: Initializes the snake.
   - `move`: Moves the snake in the current direction.
   - `grow`: Increases the size of the snake.
   - `collides_with_self`: Checks if the snake has collided with itself.

3. `Food`: This class will represent the food that the snake eats.
   - `__init__`: Initializes the food.
   - `reposition`: Moves the food to a new random position.

Now, let's write the code for each of these classes and functions.

snake.py
```python
class Snake:
    def __init__(self):
        self.positions = [(5, 5)]
        self.direction = (0, -1)

    def move(self):
        head = self.positions[0]
        new_head = (head[0] + self.direction[0], head[1] + self.direction[1])
        self.positions.insert(0, new_head)
        self.positions.pop()

    def grow(self):
        head = self.positions[0]
        new_head = (head[0] + self.direction[0], head[1] + self.direction[1])
        self.positions.insert(0, new_head)

    def collides_with_self(self):
        return self.positions[0] in self.positions[1:]
```

food.py
```python
import random

class Food:
    def __init__(self):
        self.position = (random.randint(0, 10), random.randint(0, 10))

    def reposition(self):
        self.position = (random.randint(0, 10), random.randint(0, 10))
```

game.py
```python
import curses
from snake import Snake
from food import Food

class Game:
    def __init__(self, screen):
        self.screen = screen
        self.snake = Snake()
        self.food = Food()

    def run(self):
        while True:
            self.handle_input()
            self.update()
            self.draw()

    def handle_input(self):
        key = self.screen.getch()
        if key == curses.KEY_UP:
            self.snake.direction = (0, -1)
        elif key == curses.KEY_DOWN:
            self.snake.direction = (0, 1)
        elif key == curses.KEY_LEFT:
            self.snake.direction = (-1, 0)
        elif key == curses.KEY_RIGHT:
            self.snake.direction = (1, 0)

    def update(self):
        self.snake.move()
        if self.snake.positions[0] == self.food.position:
            self.snake.grow()
            self.food.reposition()

    def draw(self):
        self.screen.clear()
        for position in self.snake.positions:
            self.screen.addch(position[1], position[0], '#')
        self.screen.addch(self.food.position[1], self.food.position[0], '*')
        self.screen.refresh()

    def game_over(self):
        head = self.snake.positions[0]
        return (head[0] < 0 or head[1] < 0 or
                head[0] >= 10 or head[1] >= 10 or
                self.snake.collides_with_self())
```

main.py
```python
import curses
from game import Game

def main(screen):
    game = Game(screen)
    game.run()

if __name__ == '__main__':
    curses.wrapper(main)
```

requirements.txt
```
curses
```

This game can be run by executing the `main.py` file. The `requirements.txt` file lists the dependencies for the game.