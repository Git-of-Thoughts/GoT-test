The core classes, functions, and methods that will be necessary are:

1. `OneHotEncoder`: This class will be used to one-hot encode the amino acid sequences.
2. `Embedding`: This class will be used to convert the one-hot encoded sequences into a lower-dimensional space.
3. `MLPClassifier`: This class will be used to perform the MLP classification.
4. `train_test_split`: This function will be used to split the data into training and testing sets.
5. `accuracy_score`: This function will be used to evaluate the performance of the MLP classifier.

Now, let's start with the "entrypoint" file, which is `main.py`.

main.py
```python
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import OneHotEncoder
from keras.layers import Embedding
import numpy as np

from data_loader import DataLoader

# Load data
data_loader = DataLoader()
sequences, labels = data_loader.load_data()

# One-hot encode sequences
encoder = OneHotEncoder()
sequences_encoded = encoder.fit_transform(sequences)

# Embed sequences
embedding = Embedding(input_dim=sequences_encoded.shape[1], output_dim=50)
sequences_embedded = embedding(sequences_encoded)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(sequences_embedded, labels, test_size=0.2, random_state=42)

# Train MLP classifier
mlp = MLPClassifier(hidden_layer_sizes=(50,), max_iter=1000)
mlp.fit(X_train, y_train)

# Make predictions
y_pred = mlp.predict(X_test)

# Evaluate performance
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')
```

Next, let's move on to the `DataLoader` class, which is defined in `data_loader.py`.

data_loader.py
```python
import numpy as np

class DataLoader:
    def load_data(self):
        # This function should load and return the amino acid sequences and their corresponding labels.
        # For the purpose of this example, we will generate random data.
        sequences = np.random.randint(0, 20, size=(1000, 100))
        labels = np.random.randint(0, 2, size=(1000,))
        return sequences, labels
```

Finally, we need to include a `requirements.txt` file to specify the dependencies.

requirements.txt
```
numpy==1.19.5
scikit-learn==0.24.1
tensorflow==2.4.1
```

This completes the architecture. The `main.py` file is the entry point of the program, which uses the `DataLoader` class to load the data, the `OneHotEncoder` class to encode the sequences, the `Embedding` class to embed the sequences, the `MLPClassifier` class to classify the sequences, and the `accuracy_score` function to evaluate the performance. The `data_loader.py` file defines the `DataLoader` class, and the `requirements.txt` file specifies the dependencies.