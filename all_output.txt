Based on the problem statement, we don't need multiple files or classes. We can solve this problem using a single function in a single Python file. The function will be named `three_sum` and it will take a list of integers as input and return a list of lists as output.

Here is the Python code for the `three_sum` function:

three_sum.py
```python
def three_sum(nums):
    """
    Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0?
    Find all unique triplets in the array which gives the sum of zero.
    """
    nums.sort()
    result = []
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        l, r = i + 1, len(nums) - 1
        while l < r:
            s = nums[i] + nums[l] + nums[r]
            if s < 0:
                l += 1
            elif s > 0:
                r -= 1
            else:
                result.append((nums[i], nums[l], nums[r]))
                while l < r and nums[l] == nums[l + 1]:
                    l += 1
                while l < r and nums[r] == nums[r - 1]:
                    r -= 1
                l += 1
                r -= 1
    return result
```

This function works by first sorting the input list. Then it iterates over the sorted list, using two pointers to scan the remaining part of the list for two numbers that sum to the negative of the current number. If the sum is less than zero, it moves the left pointer to the right. If the sum is greater than zero, it moves the right pointer to the left. If the sum is zero, it adds the triplet to the result list and moves both pointers. It also skips duplicate numbers to avoid duplicate triplets in the result.