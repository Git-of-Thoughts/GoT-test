Given the complexity of the project, we will use Django, a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Django is a good choice for this project because it comes with a lot of built-in features that will help us to build a robust and scalable application.

Here are the core classes, functions, and methods that will be necessary:

1. User: This class will represent a user in our system. It will have methods for creating, updating, and deleting a user.

2. Board: This class will represent a board in our system. It will have methods for creating, updating, and deleting a board.

3. Pin: This class will represent a pin in our system. It will have methods for creating, updating, and deleting a pin.

4. Comment: This class will represent a comment in our system. It will have methods for creating, updating, and deleting a comment.

5. Follow: This class will represent a follow relationship between two users in our system. It will have methods for creating, updating, and deleting a follow relationship.

6. AIGC: This class will be responsible for generating images using artificial intelligence. It will have a method for generating an image.

7. Views: This file will contain the functions that handle the requests and responses of our application.

8. URLs: This file will define the URL patterns for our application.

9. Settings: This file will contain the configuration settings for our application.

10. WSGI: This file will be the entry point for our application.

Now, let's write the code for each file.

wsgi.py
```python
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'architecturesite.settings')

application = get_wsgi_application()
```

settings.py
```python
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = 'your-secret-key'

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'website',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'architecturesite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'architecturesite.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = '/static/'
```

urls.py
```python
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('website.urls')),
]
```

models.py
```python
from django.db import models
from django.contrib.auth.models import User

class Board(models.Model):
    name = models.CharField(max_length=100)
    user = models.ForeignKey(User, on_delete=models.CASCADE)

class Pin(models.Model):
    image = models.ImageField(upload_to='pins/')
    description = models.TextField()
    board = models.ForeignKey(Board, on_delete=models.CASCADE)

class Comment(models.Model):
    text = models.TextField()
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    pin = models.ForeignKey(Pin, on_delete=models.CASCADE)

class Follow(models.Model):
    follower = models.ForeignKey(User, related_name='following', on_delete=models.CASCADE)
    followee = models.ForeignKey(User, related_name='followers', on_delete=models.CASCADE)
```

views.py
```python
from django.shortcuts import render
from .models import Board, Pin, Comment, Follow

def home(request):
    boards = Board.objects.all()
    return render(request, 'home.html', {'boards': boards})

def board_detail(request, board_id):
    board = Board.objects.get(id=board_id)
    return render(request, 'board_detail.html', {'board': board})

def pin_detail(request, pin_id):
    pin = Pin.objects.get(id=pin_id)
    return render(request, 'pin_detail.html', {'pin': pin})

def comment_detail(request, comment_id):
    comment = Comment.objects.get(id=comment_id)
    return render(request, 'comment_detail.html', {'comment': comment})

def follow_detail(request, follow_id):
    follow = Follow.objects.get(id=follow_id)
    return render(request, 'follow_detail.html', {'follow': follow})
```

Please note that this is a basic implementation and does not include the AIGC class for generating images. The implementation of this class would depend on the specific AI technology you want to use. Also, the views.py file only includes the detail views for simplicity. In a real application, you would also need to implement views for creating, updating, and deleting boards, pins, comments, and follows.