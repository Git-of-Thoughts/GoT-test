Based on the requirements and assumptions, we will need the following core classes and functions:

1. `Asset`: A class to represent an asset. It will have methods to fetch historical price data for the asset.
2. `DCA_Strategy`: A class to represent a dollar cost averaging strategy. It will have methods to calculate the return of the strategy over a specified time range.
3. `Sensitivity_Analysis`: A class to perform sensitivity analysis on the parameters of a DCA strategy. It will have methods to vary the parameters and calculate the resulting returns.
4. `Visualizer`: A class to visualize the results of the sensitivity analysis. It will have methods to generate interactive graphs or charts.
5. `main`: The entry point function that runs the web app. It will use the Streamlit library to create the user interface and handle user inputs.

Now let's write the code for each of these components. We'll start with the `main.py` file, which is the entry point of the application.

main.py
```python
import streamlit as st
from dca_strategy import DCA_Strategy
from sensitivity_analysis import Sensitivity_Analysis
from visualizer import Visualizer
from asset import Asset

def main():
    st.title('Dollar Cost Averaging Backtester')

    # User inputs
    asset_name = st.text_input('Enter the name of the asset:')
    start_date = st.date_input('Enter the start date of the investment period:')
    end_date = st.date_input('Enter the end date of the investment period:')
    investment_amount = st.number_input('Enter the amount of each investment:')
    investment_frequency = st.selectbox('Select the frequency of investment:', ['Daily', 'Weekly', 'Monthly'])

    # Fetch asset data
    asset = Asset(asset_name)
    asset.fetch_data(start_date, end_date)

    # Calculate DCA strategy return
    dca_strategy = DCA_Strategy(asset, investment_amount, investment_frequency)
    dca_return = dca_strategy.calculate_return()

    # Perform sensitivity analysis
    sensitivity_analysis = Sensitivity_Analysis(dca_strategy)
    sensitivity_results = sensitivity_analysis.perform()

    # Visualize results
    visualizer = Visualizer()
    visualizer.plot_dca_return(dca_return)
    visualizer.plot_sensitivity_results(sensitivity_results)

if __name__ == '__main__':
    main()
```

Now let's write the code for the `Asset`, `DCA_Strategy`, `Sensitivity_Analysis`, and `Visualizer` classes. Each of these will be in a separate file.

asset.py
```python
import pandas as pd
import yfinance as yf

class Asset:
    def __init__(self, name):
        self.name = name
        self.data = None

    def fetch_data(self, start_date, end_date):
        self.data = yf.download(self.name, start=start_date, end=end_date)
```

dca_strategy.py
```python
class DCA_Strategy:
    def __init__(self, asset, investment_amount, investment_frequency):
        self.asset = asset
        self.investment_amount = investment_amount
        self.investment_frequency = investment_frequency

    def calculate_return(self):
        # Placeholder for the actual calculation logic
        return 0
```

sensitivity_analysis.py
```python
class Sensitivity_Analysis:
    def __init__(self, dca_strategy):
        self.dca_strategy = dca_strategy

    def perform(self):
        # Placeholder for the actual analysis logic
        return {}
```

visualizer.py
```python
import matplotlib.pyplot as plt

class Visualizer:
    def plot_dca_return(self, dca_return):
        plt.figure(figsize=(10, 6))
        plt.title('DCA Strategy Return')
        plt.plot(dca_return)
        plt.show()

    def plot_sensitivity_results(self, sensitivity_results):
        plt.figure(figsize=(10, 6))
        plt.title('Sensitivity Analysis Results')
        plt.plot(sensitivity_results)
        plt.show()
```

Finally, we need a `requirements.txt` file to specify the dependencies of the project.

requirements.txt
```
streamlit
yfinance
pandas
matplotlib
```

Please note that the `calculate_return` method in the `DCA_Strategy` class and the `perform` method in the `Sensitivity_Analysis` class are placeholders. The actual implementation of these methods would depend on the specific logic for calculating the return of a DCA strategy and performing sensitivity analysis, respectively.