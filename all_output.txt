The core classes, functions, and methods necessary for the snake game are:

1. `Game`: This class will handle the game logic. It will have methods to start the game, handle user input, update the game state, and render the game on the console.
2. `Snake`: This class will represent the snake. It will have methods to get the current position of the snake, update the position, grow the snake, and check if the snake has collided with itself.
3. `Apple`: This class will represent the apple. It will have methods to get the current position of the apple and generate a new position for the apple.
4. `Point`: This class will represent a point on the grid. It will have attributes for the x and y coordinates.

Now, let's write the code for each of these classes.

game.py
```python
import random
from snake import Snake
from apple import Apple

class Game:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.snake = Snake()
        self.apple = Apple(self.width, self.height)

    def start(self):
        while True:
            self.handle_input()
            self.update()
            self.render()

    def handle_input(self):
        # Handle user input to change the direction of the snake

    def update(self):
        # Update the game state

    def render(self):
        # Render the game state on the console
```

snake.py
```python
from point import Point

class Snake:
    def __init__(self):
        self.body = [Point(0, 0)]

    def get_head_position(self):
        return self.body[0]

    def update_position(self, direction):
        # Update the position of the snake based on the given direction

    def grow(self):
        # Add a new point to the body of the snake

    def check_collision(self):
        # Check if the snake has collided with itself
```

apple.py
```python
from point import Point

class Apple:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.position = Point(0, 0)
        self.generate_new_position()

    def generate_new_position(self):
        # Generate a new position for the apple
```

point.py
```python
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
```

Please note that the code above is not complete. The methods `handle_input`, `update`, `render`, `update_position`, `grow`, `check_collision`, and `generate_new_position` need to be implemented.