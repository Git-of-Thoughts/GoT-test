2023-08-24 01:31:22.654 | INFO     | metagpt.config:__init__:44 - Config loading done.
2023-08-24 01:31:22.654 | INFO     | metagpt.config:__init__:58 - Set OPENAI_API_BASE in case of network issues
2023-08-24 01:31:25.695 | INFO     | metagpt.software_company:invest:39 - Investment: $2.0.
2023-08-24 01:31:25.696 | DEBUG    | metagpt.software_company:run:58 - n_round=1
2023-08-24 01:31:25.696 | DEBUG    | metagpt.roles.role:_observe:195 - Alice(Product Manager) observed: ['BOSS: Write me a fun snake...']
2023-08-24 01:31:25.696 | DEBUG    | metagpt.roles.role:_set_state:128 - [WritePRD]
2023-08-24 01:31:25.696 | DEBUG    | metagpt.roles.role:_react:208 - Alice(Product Manager): self._rc.state=0, will do WritePRD
2023-08-24 01:31:25.696 | INFO     | metagpt.roles.role:_act:167 - Alice(Product Manager): ready to WritePRD
2023-08-24 01:31:25.700 | DEBUG    | metagpt.actions.write_prd:run:144 - 
# Context
## Original Requirements
[BOSS: Write me a fun snake game in Python. ]

## Search Information
### Search Results


### Search Summary


## mermaid quadrantChart code syntax example. DONT USE QUOTO IN CODE DUE TO INVALID SYNTAX. Replace the <Campain X> with REAL COMPETITOR NAME
```mermaid
quadrantChart
    title Reach and engagement of campaigns
    x-axis Low Reach --> High Reach
    y-axis Low Engagement --> High Engagement
    quadrant-1 We should expand
    quadrant-2 Need to promote
    quadrant-3 Re-evaluate
    quadrant-4 May be improved
    "Campaign: A": [0.3, 0.6]
    "Campaign B": [0.45, 0.23]
    "Campaign C": [0.57, 0.69]
    "Campaign D": [0.78, 0.34]
    "Campaign E": [0.40, 0.34]
    "Campaign F": [0.35, 0.78]
    "Our Target Product": [0.5, 0.6]
```

## Format example

---
## Original Requirements
The boss ... 

## Product Goals
```python
[
    "Create a ...",
]
```

## User Stories
```python
[
    "As a user, ...",
]
```

## Competitive Analysis
```python
[
    "Python Snake Game: ...",
]
```

## Competitive Quadrant Chart
```mermaid
quadrantChart
    title Reach and engagement of campaigns
    ...
    "Our Target Product": [0.6, 0.7]
```

## Requirement Analysis
The product should be a ...

## Requirement Pool
```python
[
    ("End game ...", "P0")
]
```

## UI Design draft
Give a basic function description, and a draft

## Anything UNCLEAR
There are no unclear points.
---

-----
Role: You are a professional product manager; the goal is to design a concise, usable, efficient product
Requirements: According to the context, fill in the following missing information, note that each sections are returned in Python code triple quote form seperatedly. If the requirements are unclear, ensure minimum viability and avoid excessive design
ATTENTION: Use '##' to SPLIT SECTIONS, not '#'. AND '## <SECTION_NAME>' SHOULD WRITE BEFORE the code and triple quote. Output carefully referenced "Format example" in format.

## Original Requirements: Provide as Plain text, place the polished complete original requirements here

## Product Goals: Provided as Python list[str], up to 3 clear, orthogonal product goals. If the requirement itself is simple, the goal should also be simple

## User Stories: Provided as Python list[str], up to 5 scenario-based user stories, If the requirement itself is simple, the user stories should also be less

## Competitive Analysis: Provided as Python list[str], up to 7 competitive product analyses, consider as similar competitors as possible

## Competitive Quadrant Chart: Use mermaid quadrantChart code syntax. up to 14 competitive products. Translation: Distribute these competitor scores evenly between 0 and 1, trying to conform to a normal distribution centered around 0.5 as much as possible.

## Requirement Analysis: Provide as Plain text. Be simple. LESS IS MORE. Make your requirements less dumb. Delete the parts unnessasery.

## Requirement Pool: Provided as Python list[str, str], the parameters are requirement description, priority(P0/P1/P2), respectively, comply with PEP standards; no more than 5 requirements and consider to make its difficulty lower

## UI Design draft: Provide as Plain text. Be simple. Describe the elements and functions, also provide a simple style description and layout description.
## Anything UNCLEAR: Provide as Plain text. Make clear here.

2023-08-24 01:31:25.746 | DEBUG    | metagpt.roles.role:run:237 - Bob(Architect): no news. waiting.
2023-08-24 01:31:25.746 | DEBUG    | metagpt.roles.role:run:237 - Eve(Project Manager): no news. waiting.
2023-08-24 01:31:25.746 | DEBUG    | metagpt.roles.role:run:237 - Alex(Engineer): no news. waiting.
2023-08-24 01:31:25.746 | DEBUG    | metagpt.roles.role:run:237 - Edward(QaEngineer): no news. waiting.
2023-08-24 01:32:24.315 | INFO     | metagpt.provider.openai_api:update_cost:81 - Total running cost: $0.067 | Max budget: $2.000 | Current cost: $0.067, prompt_tokens: 846, completion_tokens: 698
2023-08-24 01:32:24.317 | DEBUG    | metagpt.provider.base_gpt_api:aask:45 - [{'role': 'system', 'content': 'You are a Product Manager, named Alice, your goal is Efficiently create a successful product, and the constraint is . '}, {'role': 'user', 'content': '\n# Context\n## Original Requirements\n[BOSS: Write me a fun snake game in Python. ]\n\n## Search Information\n### Search Results\n\n\n### Search Summary\n\n\n## mermaid quadrantChart code syntax example. DONT USE QUOTO IN CODE DUE TO INVALID SYNTAX. Replace the <Campain X> with REAL COMPETITOR NAME\n```mermaid\nquadrantChart\n    title Reach and engagement of campaigns\n    x-axis Low Reach --> High Reach\n    y-axis Low Engagement --> High Engagement\n    quadrant-1 We should expand\n    quadrant-2 Need to promote\n    quadrant-3 Re-evaluate\n    quadrant-4 May be improved\n    "Campaign: A": [0.3, 0.6]\n    "Campaign B": [0.45, 0.23]\n    "Campaign C": [0.57, 0.69]\n    "Campaign D": [0.78, 0.34]\n    "Campaign E": [0.40, 0.34]\n    "Campaign F": [0.35, 0.78]\n    "Our Target Product": [0.5, 0.6]\n```\n\n## Format example\n\n---\n## Original Requirements\nThe boss ... \n\n## Product Goals\n```python\n[\n    "Create a ...",\n]\n```\n\n## User Stories\n```python\n[\n    "As a user, ...",\n]\n```\n\n## Competitive Analysis\n```python\n[\n    "Python Snake Game: ...",\n]\n```\n\n## Competitive Quadrant Chart\n```mermaid\nquadrantChart\n    title Reach and engagement of campaigns\n    ...\n    "Our Target Product": [0.6, 0.7]\n```\n\n## Requirement Analysis\nThe product should be a ...\n\n## Requirement Pool\n```python\n[\n    ("End game ...", "P0")\n]\n```\n\n## UI Design draft\nGive a basic function description, and a draft\n\n## Anything UNCLEAR\nThere are no unclear points.\n---\n\n-----\nRole: You are a professional product manager; the goal is to design a concise, usable, efficient product\nRequirements: According to the context, fill in the following missing information, note that each sections are returned in Python code triple quote form seperatedly. If the requirements are unclear, ensure minimum viability and avoid excessive design\nATTENTION: Use \'##\' to SPLIT SECTIONS, not \'#\'. AND \'## <SECTION_NAME>\' SHOULD WRITE BEFORE the code and triple quote. Output carefully referenced "Format example" in format.\n\n## Original Requirements: Provide as Plain text, place the polished complete original requirements here\n\n## Product Goals: Provided as Python list[str], up to 3 clear, orthogonal product goals. If the requirement itself is simple, the goal should also be simple\n\n## User Stories: Provided as Python list[str], up to 5 scenario-based user stories, If the requirement itself is simple, the user stories should also be less\n\n## Competitive Analysis: Provided as Python list[str], up to 7 competitive product analyses, consider as similar competitors as possible\n\n## Competitive Quadrant Chart: Use mermaid quadrantChart code syntax. up to 14 competitive products. Translation: Distribute these competitor scores evenly between 0 and 1, trying to conform to a normal distribution centered around 0.5 as much as possible.\n\n## Requirement Analysis: Provide as Plain text. Be simple. LESS IS MORE. Make your requirements less dumb. Delete the parts unnessasery.\n\n## Requirement Pool: Provided as Python list[str, str], the parameters are requirement description, priority(P0/P1/P2), respectively, comply with PEP standards; no more than 5 requirements and consider to make its difficulty lower\n\n## UI Design draft: Provide as Plain text. Be simple. Describe the elements and functions, also provide a simple style description and layout description.\n## Anything UNCLEAR: Provide as Plain text. Make clear here.\n'}]
2023-08-24 01:32:24.318 | DEBUG    | metagpt.actions.action:_aask_v1:58 - ## Original Requirements
The boss has asked to create a fun snake game in Python.

## Product Goals
```python
[
    "Create a simple, fun and interactive snake game",
    "Ensure the game is easy to understand and play",
    "Ensure the game runs smoothly without any glitches"
]
```

## User Stories
```python
[
    "As a user, I want to be able to control the snake easily so that I can enjoy the game",
    "As a user, I want to see my score while playing so that I can track my progress",
    "As a user, I want the game to be challenging so that I can improve my skills",
    "As a user, I want the game to run smoothly without any interruptions or glitches"
]
```

## Competitive Analysis
```python
[
    "Python Snake Game: A simple snake game with basic functionalities",
    "Pygame Snake: A more advanced version with additional features",
    "Classic Snake Game: A classic version of the snake game with minimalistic design",
    "Snake Game by Google: A web-based snake game with high user engagement",
    "Slither.io: A multiplayer online snake game with high user interaction",
    "Snake '97: A retro phone classic game, very popular among users"
]
```

## Competitive Quadrant Chart
```mermaid
quadrantChart
    title Reach and engagement of campaigns
    x-axis Low Reach --> High Reach
    y-axis Low Engagement --> High Engagement
    quadrant-1 We should expand
    quadrant-2 Need to promote
    quadrant-3 Re-evaluate
    quadrant-4 May be improved
    "Python Snake Game": [0.2, 0.4]
    "Pygame Snake": [0.6, 0.5]
    "Classic Snake Game": [0.3, 0.3]
    "Snake Game by Google": [0.8, 0.7]
    "Slither.io": [0.9, 0.8]
    "Snake '97": [0.7, 0.6]
    "Our Target Product": [0.5, 0.6]
```

## Requirement Analysis
The product should be a fun and interactive snake game developed in Python. It should have a simple and intuitive user interface. The game should include basic functionalities like controlling the snake, eating the food, and keeping track of the score. The game should run smoothly without any glitches.

## Requirement Pool
```python
[
    ("Develop the basic structure of the game including the snake and the food", "P0"),
    ("Implement the functionality to control the snake", "P0"),
    ("Implement the functionality to keep track of the score", "P0"),
    ("Ensure the game runs smoothly without any glitches", "P0"),
    ("Add a feature to increase the speed of the snake as the score increases", "P1")
]
```

## UI Design draft
The game will have a simple and clean interface. The main element will be the game area where the snake moves around. The score will be displayed at the top of the game area. The snake can be controlled using the arrow keys. The game will have a retro style with a black background and the snake and food will be in bright colors for contrast.

## Anything UNCLEAR
There are no unclear points.
2023-08-24 01:32:24.321 | DEBUG    | metagpt.actions.action:_aask_v1:61 - {'Original Requirements': 'The boss has asked to create a fun snake game in Python.', 'Product Goals': ['Create a simple, fun and interactive snake game', 'Ensure the game is easy to understand and play', 'Ensure the game runs smoothly without any glitches'], 'User Stories': ['As a user, I want to be able to control the snake easily so that I can enjoy the game', 'As a user, I want to see my score while playing so that I can track my progress', 'As a user, I want the game to be challenging so that I can improve my skills', 'As a user, I want the game to run smoothly without any interruptions or glitches'], 'Competitive Analysis': ['Python Snake Game: A simple snake game with basic functionalities', 'Pygame Snake: A more advanced version with additional features', 'Classic Snake Game: A classic version of the snake game with minimalistic design', 'Snake Game by Google: A web-based snake game with high user engagement', 'Slither.io: A multiplayer online snake game with high user interaction', "Snake '97: A retro phone classic game, very popular among users"], 'Competitive Quadrant Chart': 'quadrantChart\n    title Reach and engagement of campaigns\n    x-axis Low Reach --> High Reach\n    y-axis Low Engagement --> High Engagement\n    quadrant-1 We should expand\n    quadrant-2 Need to promote\n    quadrant-3 Re-evaluate\n    quadrant-4 May be improved\n    "Python Snake Game": [0.2, 0.4]\n    "Pygame Snake": [0.6, 0.5]\n    "Classic Snake Game": [0.3, 0.3]\n    "Snake Game by Google": [0.8, 0.7]\n    "Slither.io": [0.9, 0.8]\n    "Snake \'97": [0.7, 0.6]\n    "Our Target Product": [0.5, 0.6]\n', 'Requirement Analysis': 'The product should be a fun and interactive snake game developed in Python. It should have a simple and intuitive user interface. The game should include basic functionalities like controlling the snake, eating the food, and keeping track of the score. The game should run smoothly without any glitches.', 'Requirement Pool': [('Develop the basic structure of the game including the snake and the food', 'P0'), ('Implement the functionality to control the snake', 'P0'), ('Implement the functionality to keep track of the score', 'P0'), ('Ensure the game runs smoothly without any glitches', 'P0'), ('Add a feature to increase the speed of the snake as the score increases', 'P1')], 'UI Design draft': 'The game will have a simple and clean interface. The main element will be the game area where the snake moves around. The score will be displayed at the top of the game area. The snake can be controlled using the arrow keys. The game will have a retro style with a black background and the snake and food will be in bright colors for contrast.', 'Anything UNCLEAR': 'There are no unclear points.'}
2023-08-24 01:32:24.321 | DEBUG    | metagpt.software_company:run:58 - n_round=0
2023-08-24 01:32:24.322 | DEBUG    | metagpt.roles.role:run:237 - Alice(Product Manager): no news. waiting.
2023-08-24 01:32:24.322 | DEBUG    | metagpt.roles.role:_observe:195 - Bob(Architect) observed: ['Product Manager: ## Original Requirem...']
2023-08-24 01:32:24.322 | DEBUG    | metagpt.roles.role:_set_state:128 - [WriteDesign]
2023-08-24 01:32:24.322 | DEBUG    | metagpt.roles.role:_react:208 - Bob(Architect): self._rc.state=0, will do WriteDesign
2023-08-24 01:32:24.322 | INFO     | metagpt.roles.role:_act:167 - Bob(Architect): ready to WriteDesign
2023-08-24 01:32:24.324 | DEBUG    | metagpt.roles.role:run:237 - Eve(Project Manager): no news. waiting.
2023-08-24 01:32:24.324 | DEBUG    | metagpt.roles.role:run:237 - Alex(Engineer): no news. waiting.
2023-08-24 01:32:24.324 | DEBUG    | metagpt.roles.role:run:237 - Edward(QaEngineer): no news. waiting.
2023-08-24 01:32:57.965 | INFO     | metagpt.provider.openai_api:update_cost:81 - Total running cost: $0.130 | Max budget: $2.000 | Current cost: $0.063, prompt_tokens: 1221, completion_tokens: 442
2023-08-24 01:32:57.966 | DEBUG    | metagpt.provider.base_gpt_api:aask:45 - [{'role': 'system', 'content': 'You are a Architect, named Bob, your goal is Design a concise, usable, complete python system, and the constraint is Try to specify good open source tools as much as possible. '}, {'role': 'user', 'content': '\n# Context\n[Product Manager: ## Original Requirements\nThe boss has asked to create a fun snake game in Python.\n\n## Product Goals\n```python\n[\n    "Create a simple, fun and interactive snake game",\n    "Ensure the game is easy to understand and play",\n    "Ensure the game runs smoothly without any glitches"\n]\n```\n\n## User Stories\n```python\n[\n    "As a user, I want to be able to control the snake easily so that I can enjoy the game",\n    "As a user, I want to see my score while playing so that I can track my progress",\n    "As a user, I want the game to be challenging so that I can improve my skills",\n    "As a user, I want the game to run smoothly without any interruptions or glitches"\n]\n```\n\n## Competitive Analysis\n```python\n[\n    "Python Snake Game: A simple snake game with basic functionalities",\n    "Pygame Snake: A more advanced version with additional features",\n    "Classic Snake Game: A classic version of the snake game with minimalistic design",\n    "Snake Game by Google: A web-based snake game with high user engagement",\n    "Slither.io: A multiplayer online snake game with high user interaction",\n    "Snake \'97: A retro phone classic game, very popular among users"\n]\n```\n\n## Competitive Quadrant Chart\n```mermaid\nquadrantChart\n    title Reach and engagement of campaigns\n    x-axis Low Reach --> High Reach\n    y-axis Low Engagement --> High Engagement\n    quadrant-1 We should expand\n    quadrant-2 Need to promote\n    quadrant-3 Re-evaluate\n    quadrant-4 May be improved\n    "Python Snake Game": [0.2, 0.4]\n    "Pygame Snake": [0.6, 0.5]\n    "Classic Snake Game": [0.3, 0.3]\n    "Snake Game by Google": [0.8, 0.7]\n    "Slither.io": [0.9, 0.8]\n    "Snake \'97": [0.7, 0.6]\n    "Our Target Product": [0.5, 0.6]\n```\n\n## Requirement Analysis\nThe product should be a fun and interactive snake game developed in Python. It should have a simple and intuitive user interface. The game should include basic functionalities like controlling the snake, eating the food, and keeping track of the score. The game should run smoothly without any glitches.\n\n## Requirement Pool\n```python\n[\n    ("Develop the basic structure of the game including the snake and the food", "P0"),\n    ("Implement the functionality to control the snake", "P0"),\n    ("Implement the functionality to keep track of the score", "P0"),\n    ("Ensure the game runs smoothly without any glitches", "P0"),\n    ("Add a feature to increase the speed of the snake as the score increases", "P1")\n]\n```\n\n## UI Design draft\nThe game will have a simple and clean interface. The main element will be the game area where the snake moves around. The score will be displayed at the top of the game area. The snake can be controlled using the arrow keys. The game will have a retro style with a black background and the snake and food will be in bright colors for contrast.\n\n## Anything UNCLEAR\nThere are no unclear points.]\n\n## Format example\n\n---\n## Implementation approach\nWe will ...\n\n## Python package name\n```python\n"snake_game"\n```\n\n## File list\n```python\n[\n    "main.py",\n]\n```\n\n## Data structures and interface definitions\n```mermaid\nclassDiagram\n    class Game{\n        +int score\n    }\n    ...\n    Game "1" -- "1" Food: has\n```\n\n## Program call flow\n```mermaid\nsequenceDiagram\n    participant M as Main\n    ...\n    G->>M: end game\n```\n\n## Anything UNCLEAR\nThe requirement is clear to me.\n---\n\n-----\nRole: You are an architect; the goal is to design a SOTA PEP8-compliant python system; make the best use of good open source tools\nRequirement: Fill in the following missing information based on the context, note that all sections are response with code form separately\nMax Output: 8192 chars or 2048 tokens. Try to use them up.\nAttention: Use \'##\' to split sections, not \'#\', and \'## <SECTION_NAME>\' SHOULD WRITE BEFORE the code and triple quote.\n\n## Implementation approach: Provide as Plain text. Analyze the difficult points of the requirements, select the appropriate open-source framework.\n\n## Python package name: Provide as Python str with python triple quoto, concise and clear, characters only use a combination of all lowercase and underscores\n\n## File list: Provided as Python list[str], the list of ONLY REQUIRED files needed to write the program(LESS IS MORE!). Only need relative paths, comply with PEP8 standards. ALWAYS write a main.py or app.py here\n\n## Data structures and interface definitions: Use mermaid classDiagram code syntax, including classes (INCLUDING __init__ method) and functions (with type annotations), CLEARLY MARK the RELATIONSHIPS between classes, and comply with PEP8 standards. The data structures SHOULD BE VERY DETAILED and the API should be comprehensive with a complete design. \n\n## Program call flow: Use sequenceDiagram code syntax, COMPLETE and VERY DETAILED, using CLASSES AND API DEFINED ABOVE accurately, covering the CRUD AND INIT of each object, SYNTAX MUST BE CORRECT.\n\n## Anything UNCLEAR: Provide as Plain text. Make clear here.\n\n'}]
2023-08-24 01:32:57.966 | DEBUG    | metagpt.actions.action:_aask_v1:58 - ## Implementation approach
The game will be implemented using the Pygame library, an open-source module for Python that is designed for video game creation. The game will be a simple, single-player game where the player controls a snake to eat food. As the snake eats food, it grows longer and the game becomes more challenging. The game ends when the snake collides with the game boundary or with itself.

The main challenges in implementing this game include handling user input for snake movement, detecting collision with the food or with the snake itself, and updating the game state and user interface in real-time.

## Python package name
```python
"snake_game_py"
```

## File list
```python
[
    "main.py",
    "game.py",
    "snake.py",
    "food.py"
]
```

## Data structures and interface definitions
```mermaid
classDiagram
    class Game{
        +int score
        +bool game_over
        +Snake snake
        +Food food
        +start_game()
        +end_game()
        +update_game_state()
    }
    class Snake{
        +list body
        +str direction
        +move()
        +grow()
        +check_collision()
    }
    class Food{
        +tuple position
        +generate_food()
    }
    Game "1" -- "1" Snake: has
    Game "1" -- "1" Food: has
```

## Program call flow
```mermaid
sequenceDiagram
    participant M as Main
    participant G as Game
    participant S as Snake
    participant F as Food
    M->>G: start_game()
    loop game not over
        G->>S: move()
        G->>S: check_collision()
        alt collision with food
            G->>F: generate_food()
            G->>S: grow()
            G->>G: update_game_state()
        else collision with self or boundary
            G->>G: end_game()
        end
    end
    G->>M: end game
```

## Anything UNCLEAR
The requirement is clear to me.
2023-08-24 01:32:57.968 | DEBUG    | metagpt.actions.action:_aask_v1:61 - {'Implementation approach': 'The game will be implemented using the Pygame library, an open-source module for Python that is designed for video game creation. The game will be a simple, single-player game where the player controls a snake to eat food. As the snake eats food, it grows longer and the game becomes more challenging. The game ends when the snake collides with the game boundary or with itself.\n\nThe main challenges in implementing this game include handling user input for snake movement, detecting collision with the food or with the snake itself, and updating the game state and user interface in real-time.', 'Python package name': '"snake_game_py"\n', 'File list': ['main.py', 'game.py', 'snake.py', 'food.py'], 'Data structures and interface definitions': 'classDiagram\n    class Game{\n        +int score\n        +bool game_over\n        +Snake snake\n        +Food food\n        +start_game()\n        +end_game()\n        +update_game_state()\n    }\n    class Snake{\n        +list body\n        +str direction\n        +move()\n        +grow()\n        +check_collision()\n    }\n    class Food{\n        +tuple position\n        +generate_food()\n    }\n    Game "1" -- "1" Snake: has\n    Game "1" -- "1" Food: has\n', 'Program call flow': 'sequenceDiagram\n    participant M as Main\n    participant G as Game\n    participant S as Snake\n    participant F as Food\n    M->>G: start_game()\n    loop game not over\n        G->>S: move()\n        G->>S: check_collision()\n        alt collision with food\n            G->>F: generate_food()\n            G->>S: grow()\n            G->>G: update_game_state()\n        else collision with self or boundary\n            G->>G: end_game()\n        end\n    end\n    G->>M: end game\n', 'Anything UNCLEAR': 'The requirement is clear to me.'}
2023-08-24 01:32:57.971 | WARNING  | metagpt.utils.mermaid:mermaid_to_file:31 - RUN `npm install -g @mermaid-js/mermaid-cli` to install mmdc
2023-08-24 01:32:57.971 | INFO     | metagpt.actions.design_api:_save_prd:110 - Saving PRD to /mnt/disks/disk-1/users/kingh/Gothub/repos/orders/KvXhaWxtnqYn4rkw4vFLSX7kMaO2_9s7UqJHjzWErzAVf2t4n/target_repo/workspace/snake_game_py/docs/prd.md
2023-08-24 01:32:57.973 | WARNING  | metagpt.utils.mermaid:mermaid_to_file:31 - RUN `npm install -g @mermaid-js/mermaid-cli` to install mmdc
2023-08-24 01:32:57.974 | WARNING  | metagpt.utils.mermaid:mermaid_to_file:31 - RUN `npm install -g @mermaid-js/mermaid-cli` to install mmdc
2023-08-24 01:32:57.974 | INFO     | metagpt.actions.design_api:_save_system_design:119 - Saving System Designs to /mnt/disks/disk-1/users/kingh/Gothub/repos/orders/KvXhaWxtnqYn4rkw4vFLSX7kMaO2_9s7UqJHjzWErzAVf2t4n/target_repo/workspace/snake_game_py/docs/system_design.md
